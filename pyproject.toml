[tool.poetry]
name = "flask-unchained"
version = "0.10.0a2"
description = "The quickest and easiest way to build web apps and APIs with Flask"
repository = "https://github.com/briancappello/flask-unchained"
authors = ["Brian Cappello <briancappello@gmail.com>"]
readme = "README.md"
license = "MIT"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Web Environment",
    "Framework :: Flask",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
packages = [
    { include = "flask_unchained" },
    { include = "flask_mail.py" },
    { include = "unchained_config.py" },
]
include = [
    "LICENSE",
    "CHANGELOG.md",
    "flask_unchained",
]

[tool.poetry.scripts]
fun = "flask_unchained.cli:main"
flask = "flask_unchained.cli:main"

[tool.poetry.plugins.pytest11]
flask_unchained = "flask_unchained.pytest"

[tool.poetry.dependencies]
python = "^3.10"
blinker = "^1.4.0"
click = "^8.0"
flask = ">=2.2"
flask-babel = "^4.0.0"
flask-wtf = "^1.2.1"
py-meta-utils = "^0.8.0"
pyterminalsize = "^0.1.0"
networkx = ">=2.5"
email-validator = "^2.1.0.post1"
speaklater = "^1.3"
setuptools = "^69.0.3"

# admin extra
flask-admin = { version = "^1.6.1", optional = true }

# api extra
apispec = { version = "^6.4.0", optional = true }
apispec-webframeworks = { version = "^1.0.0", optional = true }
flask-marshmallow = { version = "^1.2.0", optional = true }
marshmallow = { version = "^3.20.2", optional = true }
marshmallow-sqlalchemy = { version = "^1.0.0", optional = true }

# quart extra
quart = { version = "^0.19.4", optional = true }

# celery extra
celery = { version = "^5.3.6", optional = true }
dill = { version = "^0.3.8", optional = true }

# graphene extra
graphql-core = { version = ">=2.3.1,<3", optional = true }
graphql-relay = { version = ">=2.0.1,<3", optional = true }
graphql-server-core = { version = ">=1.2,<2", optional = true }
flask-graphql = { version = "^2.0.1", optional = true }
graphene = { version = ">=2.1.9,<3", optional = true }
graphene-sqlalchemy = { version = ">=2.2,<3", optional = true }

# mail extra
beautifulsoup4 = { version = "^4.12.3", optional = true }
lxml = { version = "^5.1.0", optional = true }

# oauth extra
flask-oauthlib = { version = "^0.9.6", optional = true }

# security extra
bcrypt = { version = "^4.1.2", optional = true }
flask-login = { version = "^0.6.3", optional = true }
flask-principal = { version = "^0.4.0", optional = true }
itsdangerous = { version = "^2.1.2", optional = true }
passlib = { version = "^1.7.4", optional = true }

# session extra
flask-session = { version = "^0.6.0", optional = true }

# sqlalchemy extra
flask-migrate = { version = "^4.0.5", optional = true }
flask-sqlalchemy = { version = ">=3.0,<3.1", optional = true }
flask-sqlalchemy-unchained = { version = "^0.8.0", optional = true }
sqlalchemy = { version = ">=1.4,<2", optional = true }
wtforms-sqlalchemy = { version = "^0.4.1", optional = true }

[tool.poetry.group.dev.dependencies]
black = "^24.1.1"
ipython = "^8.21.0"
factory-boy = "^3.3.0"
pytest = "^7.0.0"
pytest-flask = "^1.3.0"
tox = "^4.12.1"
psycopg2 = "^2.9.9"

[tool.poetry.group.docs.dependencies]
ipython = "^8.21.0"
sphinx = "^7.2.6"
sphinx-click = "^5.1.0"
sphinx-material = "^0.0.36"
m2r2 = "^0.3.3.post2"

[tool.poetry.extras]
admin = ["flask-admin"]
api = ["apispec", "apispec-webframeworks", "flask-marshmallow", "marshmallow", "marshmallow-sqlalchemy"]
quart = ["quart"]
celery = ["dill", "celery"]
graphene = ["graphql-core", "graphql-relay", "graphql-server-core", "flask-graphql", "graphene", "graphene-sqlalchemy"]
mail = ["beautifulsoup4", "lxml"]
oauth = ["flask-oauthlib"]
security = ["bcrypt", "flask-login", "flask-principal", "itsdangerous", "passlib"]
session = ["dill", "flask-session"]
sqlalchemy = ["flask-migrate", "flask-sqlalchemy", "flask-sqlalchemy-unchained", "sqlalchemy", "wtforms-sqlalchemy"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-s"
markers = [
    "bundles: mark test(s) as using a specific list of bundles",
    "role: mark to customize RoleFactory arguments for a single Role",
    "roles: mark to customize RoleFactory arguments for multiple Roles",
    "user: mark to customize UserFactory arguments for a single User",
    "users: mark to customize UserFactory arguments for multiple Users",
]
filterwarnings = [
    "ignore:the imp module is deprecated in favour of importlib:DeprecationWarning",
    "ignore:The create_engine.convert_unicode parameter:sqlalchemy.exc.SADeprecationWarning",
    "ignore:Use .persist_selectable:sqlalchemy.exc.SADeprecationWarning",
]
